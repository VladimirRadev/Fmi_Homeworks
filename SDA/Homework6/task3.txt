#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <queue>
using namespace std;

class BSTNode
{
  public:
    int value;
    BSTNode* left;
    BSTNode* right;
    
    BSTNode(const int& value=0,BSTNode* left=nullptr,BSTNode* right=nullptr):value(value),left(left),right(right){}
};

BSTNode* insertElement(BSTNode* root,int& value)
{
    if(root==nullptr)
    {
        return new BSTNode(value);
    }
    if(root->value>value)
    {
        root->left=insertElement(root->left,value);
    }
    else if(root->value<value)
    {
        root->right=insertElement(root->right,value);
    }
    return root;
}
BSTNode* deleteElement(BSTNode* root,int& value)
{
    if(root==nullptr)
    {
        return nullptr;
    }
    if(root->value>value)
    {
        root->left=deleteElement(root->left,value);
    }
    else if(root->value<value)
    {
        root->right=deleteElement(root->right,value);
    }
    else
    {
        if(root->right!=nullptr && root->left!=nullptr)
        {
            BSTNode* temp=root->right;
            while(temp->left!=nullptr)
            {
                temp=temp->left;
            }
            root->value=temp->value;
            root->right=deleteElement(root->right,root->value);
            
        }
        else if(root->right!=nullptr)
        {
            BSTNode* temp=root->right;
            delete root;
            return temp;
        }
        else if(root->left!=nullptr)
        {
            BSTNode*temp=root->left;
            delete root;
            return temp;
            
        }
        else
        {
            BSTNode* temp=root;
            delete temp;
            return nullptr;
        }
    }
    return root;
}
vector<int> Bfs(BSTNode* root)
{
    if(root==nullptr)
    {
        return vector<int>();
    }
    vector<int>result;
    queue<BSTNode*>line;
    queue<BSTNode*>nextLine;
    line.push(root);
    while(!line.empty())
    {
        BSTNode* curr=line.front();
        line.pop();
        result.push_back(curr->value);
        if(curr->left!=nullptr)
        {
            nextLine.push(curr->left);

        }
        if(curr->right!=nullptr)
        {
            nextLine.push(curr->right);
        }
        if(line.empty())
        {
            line=nextLine;
            nextLine=queue<BSTNode*>();
        }
    }
    return result;
    
}

BSTNode* orderedVec(BSTNode* root,vector<int>& orderedNums)
{
    if(root!=nullptr)
    {
        orderedVec(root->left,orderedNums);
        orderedNums.push_back(root->value);
        orderedVec(root->right,orderedNums);
    }
    return root;
}
int main() {
   int n=0,k=0,input=0;
    BSTNode* root=nullptr;
    cin>>n>>k;
    for(int i=0;i<n;i++)
    {
        cin>>input;
        root=insertElement(root,input);
    }
      
    vector<int>orderedSeq;
    orderedVec(root,orderedSeq);
    root=deleteElement(root,orderedSeq[orderedSeq.size()-k]);
    vector<int> result=Bfs(root);
    for(int i=0;i<result.size();i++)
    {
        cout<<result[i]<<' ';
    }
    cout<<endl;
    
    
}
